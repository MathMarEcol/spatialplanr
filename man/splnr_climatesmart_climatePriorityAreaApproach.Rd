% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils-climate.R
\name{splnr_climatesmart_climatePriorityAreaApproach}
\alias{splnr_climatesmart_climatePriorityAreaApproach}
\title{Function to run the climate-priority-area approach}
\usage{
splnr_climatesmart_climatePriorityAreaApproach(
  featuresDF,
  metricDF,
  targetsDF,
  direction,
  percentile = 5,
  refugiaTarget = 1
)
}
\arguments{
\item{featuresDF}{feature \code{sf}object which should have a column for cellID}

\item{metricDF}{climate metric data.frame with 'metric' as the column name of the metric values per planning unit. This should also have a column for the cellID}

\item{targetsDF}{\code{data.frame}with list of features under "feature" column and their corresponding targets under "target" column}

\item{direction}{If direction = 1, metric values are from low (least climate-smart) to high (most climate-smart). If direction = -1, metric values are from high (least climate-smart) to low (most climate-smart).}

\item{percentile}{cut-off threshold for determining whether an area is a climate priority area or not (e.g., lower 35th percentile of warming or upper 65th percentile of acidification). Note that the percentile here is the lower limit of the threshold.}

\item{refugiaTarget}{target assigned to climate-smart areas}
}
\value{
A \code{list} with two components: 1. is the data frame passed to \code{prioritizr} when creating a conservation problem containing the binary information per planning unit per feature. 2. are the targets for the features in the conservation problem when the CPA approach is used.
}
\description{
Function to run the climate-priority-area approach
}
\examples{
Features <- dat_species_bin \%>\%
  dplyr::select(-"cellID")

target <- Features \%>\%
  sf::st_drop_geometry() \%>\%
  colnames() \%>\%
  data.frame() \%>\%
  setNames(c("feature")) \%>\%
  dplyr::mutate(target = 0.3)

metric_df <- dat_clim


CPA_Approach <- splnr_climatesmart_climatePriorityAreaApproach(featuresDF = dat_species_bin,
                    metricDF = metric_df, targetsDF = target, direction = 1)
out_sf <- CPA_Approach$Features
targets <- CPA_Approach$Targets
}
